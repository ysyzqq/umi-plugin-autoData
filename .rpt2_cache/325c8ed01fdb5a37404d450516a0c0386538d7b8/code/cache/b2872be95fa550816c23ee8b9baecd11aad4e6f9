{"code":"import * as tslib_1 from \"tslib\";\r\nimport React from 'react';\r\nimport { isPlainObject, isFunction } from 'lodash';\r\nimport qs from 'qs';\r\nimport Form from 'antd/lib/form';\r\nimport 'antd/lib/form/style';\r\nimport Row from 'antd/lib/row';\r\nimport 'antd/lib/row/style';\r\nimport Input from 'antd/lib/input';\r\nimport 'antd/lib/input/style';\r\nimport Button from 'antd/lib/button';\r\nimport 'antd/lib/button/style';\r\nimport Icon from 'antd/lib/icon';\r\nimport 'antd/lib/icon/style';\r\nimport Col from 'antd/lib/col';\r\nimport 'antd/lib/col/style';\r\nfunction getHashQuery(hash) {\r\n    if (hash === void 0) { hash = window.location.hash; }\r\n    var query = (hash && hash.indexOf('?') > -1) ? hash.substring(hash.indexOf('?')) : '';\r\n    return query ? qs.parse(query.substring(1)) : {};\r\n}\r\nvar initialState = {\r\n    simple: false,\r\n    searchValues: {},\r\n};\r\nexport default function (options) {\r\n    return function AutoDataWrapper(WrapperedComponent) {\r\n        var AutoData = /** @class */ (function (_super) {\r\n            tslib_1.__extends(AutoData, _super);\r\n            function AutoData(props) {\r\n                var _this = _super.call(this, props) || this;\r\n                _this.state = initialState;\r\n                _this.onFieldChange = function () {\r\n                    options.autoSubmit && _this.onSearch();\r\n                };\r\n                _this.onSearch = function (event) {\r\n                    event && isFunction(event.preventDefault) && event.preventDefault();\r\n                    var values = _this.getValuesByQuery();\r\n                    _this.setState({ searchValues: values }, function () {\r\n                        _this.c && _this.c.afterGetSearcherValues && _this.c.afterGetSearcherValues(values);\r\n                    });\r\n                };\r\n                _this.toggleForm = function () {\r\n                    _this.setState({\r\n                        simple: !_this.state.simple\r\n                    });\r\n                };\r\n                _this.searchFields = [];\r\n                return _this;\r\n            }\r\n            AutoData.prototype.getValuesByQuery = function () {\r\n                if (!options.mergeQueryFromLocation && !options.exactQueryFromSearcher)\r\n                    return {};\r\n                var query = getHashQuery();\r\n                var values = {};\r\n                this.searchFields\r\n                    .filter(function (field) { return field.name; })\r\n                    .forEach(function (_a) {\r\n                    var name = _a.name, valueType = _a.valueType;\r\n                    if (name.indexOf(',') > 0) {\r\n                        values[name] = [];\r\n                        name.split(',').forEach(function (n, i) {\r\n                            n = n.trim();\r\n                            if (query[n])\r\n                                values[name][i] = (valueType || String)(query[n]);\r\n                        });\r\n                    }\r\n                    else if (query[name]) {\r\n                        values[name] = (valueType || String)(query[name]);\r\n                    }\r\n                });\r\n                return values;\r\n            };\r\n            AutoData.prototype.getFieldsGrid = function () {\r\n                var cols = options.cols || 2;\r\n                var size = 0;\r\n                var sum = 0;\r\n                for (var _i = 0, _a = this.searchFields.map(function (item) { return item.colspan || 1; }); _i < _a.length; _i++) {\r\n                    var n = _a[_i];\r\n                    if (sum + n > cols) {\r\n                        return size;\r\n                    }\r\n                    else {\r\n                        sum += n;\r\n                        size++;\r\n                    }\r\n                }\r\n                return size;\r\n            };\r\n            // todo need a Searcher class\r\n            AutoData.prototype.getSearcher = function (config) {\r\n                var _this = this;\r\n                var finalConfig;\r\n                if (Array.isArray(config)) {\r\n                    finalConfig = config;\r\n                }\r\n                else if (isPlainObject(config)) {\r\n                    finalConfig = Object.keys(config).map(function (name) { return (tslib_1.__assign({}, config[name], { name: name })); });\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n                this.searchFields = finalConfig;\r\n                var searchFields = this.searchFields;\r\n                var onChange = this.onFieldChange;\r\n                var simple = this.state.simple;\r\n                var getFieldDecorator = this.props.form.getFieldDecorator;\r\n                var values = this.getValuesByQuery();\r\n                var size = this.getFieldsGrid();\r\n                return (React.createElement(Form, { layout: \"inline\" },\r\n                    React.createElement(Row, { gutter: 24 },\r\n                        (simple ? searchFields.slice(0, size) : searchFields).map(function (field, i) {\r\n                            var name = field.name, label = field.label, wrapperClassName = field.wrapperClassName, _a = field.props, props = _a === void 0 ? {} : _a, colspan = field.colspan, render = field.render, _b = field.component, Component = _b === void 0 ? Input : _b, defaultValue = field.defaultValue, _c = field.options, options = _c === void 0 ? {} : _c;\r\n                            var _d = props.placeholder, placeholder = _d === void 0 ? \"\\u8BF7\\u8F93\\u5165\" + label : _d, restProps = tslib_1.__rest(props, [\"placeholder\"]);\r\n                            var mergeProps = tslib_1.__assign({}, restProps, { placeholder: placeholder, onChange: onChange });\r\n                            var cols = colspan || 1;\r\n                            var colProps = {\r\n                                xxl: 4 * cols,\r\n                                xl: 6 * cols,\r\n                                lg: 8 * cols,\r\n                                md: 12 * cols,\r\n                                className: wrapperClassName,\r\n                                key: name || i\r\n                            };\r\n                            var initValue = function (defaultValue) {\r\n                                return Array.isArray(values[name])\r\n                                    ? values[name].length\r\n                                        ? values[name]\r\n                                        : defaultValue || []\r\n                                    : values[name] || values[name] === 0\r\n                                        ? values[name]\r\n                                        : defaultValue;\r\n                            };\r\n                            var initialValue = initValue(isFunction(defaultValue)\r\n                                ? defaultValue.bind(_this)()\r\n                                : defaultValue);\r\n                            var input = isFunction(render) ? (render.bind(_this)(field)) : (React.createElement(Component, tslib_1.__assign({}, mergeProps)));\r\n                            if (name) {\r\n                                return (React.createElement(Col, tslib_1.__assign({}, colProps),\r\n                                    React.createElement(Form.Item, { label: label }, getFieldDecorator(name, tslib_1.__assign({ initialValue: initialValue }, options))(input))));\r\n                            }\r\n                            return (React.createElement(Col, tslib_1.__assign({}, colProps),\r\n                                React.createElement(\"div\", { className: \"ant-row ant-form-item\" },\r\n                                    label ? (React.createElement(\"div\", { className: \"ant-form-item-label\" },\r\n                                        React.createElement(\"label\", null, label))) : null,\r\n                                    React.createElement(\"div\", { className: \"ant-form-item-control-wrapper\" },\r\n                                        React.createElement(\"div\", { className: \"ant-form-item-control\" }, input)))));\r\n                        }),\r\n                        React.createElement(Col, { xxl: 4, xl: 6, lg: 8, md: 12 },\r\n                            !options.autoSubmit ? (React.createElement(Button, { type: \"primary\", htmlType: \"submit\", onClick: this.onSearch }, options.searchHandleText)) : null,\r\n                            searchFields.length > size ? (React.createElement(\"a\", { onClick: this.toggleForm }, simple ? (React.createElement(\"span\", null,\r\n                                \"\\u5C55\\u5F00 \",\r\n                                React.createElement(Icon, { type: \"down\" }))) : (React.createElement(\"span\", null,\r\n                                \"\\u6536\\u8D77 \",\r\n                                React.createElement(Icon, { type: \"up\" }))))) : null))));\r\n            };\r\n            AutoData.prototype.render = function () {\r\n                var _this = this;\r\n                var searcher = this.getSearcher(options.searcher);\r\n                var props = tslib_1.__assign({}, this.props, { searcher: searcher });\r\n                return React.createElement(WrapperedComponent, tslib_1.__assign({}, props, { ref: function (c) { return _this.c = c; } }));\r\n            };\r\n            return AutoData;\r\n        }(React.Component));\r\n        return Form.create(options)(AutoData);\r\n    };\r\n}\r\n// declare class IComponent<P = {}, T = {}> { // {} any Object\r\n//   catch(val : P):T;\r\n// }\r\n// interface Res<P> {\r\n//   data: P;\r\n// } \r\n// class ID<P extends {name: string}> extends IComponent<P,Res<string>>{\r\n//   catch(val: P): Res<string>{\r\n//     return {data: val['name']}\r\n//   };\r\n// }\r\n// interface ArgumentsHost {\r\n//   getArgs<T extends Array<any> = any[]>(): T;\r\n//   getArgByIndex<T = any>(index: number): T;\r\n// }\r\n// interface Host extends ArgumentsHost{\r\n//   getClass<T = any>(): T;\r\n//   getHandler(): Function;\r\n// }\r\n// interface IHost extends Host{\r\n// }\r\n// declare class Test{\r\n//   test(str: string): string;\r\n//   test(num: number);\r\n// }\r\n// let a = {name: '123', age: 12, h: {name:123}}\r\n// type A = typeof a;\r\n// type All = {\r\n//   component: A[keyof A]\r\n// }\r\n// let test:All = { component: {name:213}}\r\n"}
